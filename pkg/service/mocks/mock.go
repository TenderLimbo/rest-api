// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	rest_api "github.com/TenderLimbo/rest-api"
	gomock "github.com/golang/mock/gomock"
)

// MockBooksManager is a mock of BooksManager interface.
type MockBooksManager struct {
	ctrl     *gomock.Controller
	recorder *MockBooksManagerMockRecorder
}

// MockBooksManagerMockRecorder is the mock recorder for MockBooksManager.
type MockBooksManagerMockRecorder struct {
	mock *MockBooksManager
}

// NewMockBooksManager creates a new mock instance.
func NewMockBooksManager(ctrl *gomock.Controller) *MockBooksManager {
	mock := &MockBooksManager{ctrl: ctrl}
	mock.recorder = &MockBooksManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksManager) EXPECT() *MockBooksManagerMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBooksManager) CreateBook(book rest_api.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBooksManagerMockRecorder) CreateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBooksManager)(nil).CreateBook), book)
}

// DeleteBookByID mocks base method.
func (m *MockBooksManager) DeleteBookByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookByID indicates an expected call of DeleteBookByID.
func (mr *MockBooksManagerMockRecorder) DeleteBookByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookByID", reflect.TypeOf((*MockBooksManager)(nil).DeleteBookByID), id)
}

// GetBookByID mocks base method.
func (m *MockBooksManager) GetBookByID(id int) (rest_api.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", id)
	ret0, _ := ret[0].(rest_api.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockBooksManagerMockRecorder) GetBookByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockBooksManager)(nil).GetBookByID), id)
}

// GetBooks mocks base method.
func (m *MockBooksManager) GetBooks(filterCondition map[string][]string) ([]rest_api.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", filterCondition)
	ret0, _ := ret[0].([]rest_api.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBooksManagerMockRecorder) GetBooks(filterCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBooksManager)(nil).GetBooks), filterCondition)
}

// UpdateBookByID mocks base method.
func (m *MockBooksManager) UpdateBookByID(id int, book rest_api.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookByID", id, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookByID indicates an expected call of UpdateBookByID.
func (mr *MockBooksManagerMockRecorder) UpdateBookByID(id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookByID", reflect.TypeOf((*MockBooksManager)(nil).UpdateBookByID), id, book)
}
